#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC         &kp N1     &kp N2        &kp N3        &kp N4     &kp N5               &kp UP_ARROW     &kp N6  &kp N7     &kp N8     &kp N9        &kp N0      &kp BACKSPACE
&kp Q           &kp W      &kp E         &kp R         &kp T      &lt 4 LEFT_ARROW     &kp DOWN_ARROW   &kp Y   &kp U      &kp I      &kp O         &kp P       &kp APOS
&kp TAB         &kp A      &kp S         &kp D         &kp F      &kp G                &kp LEFT_ARROW   &kp H   &kp J      &kp K      &kp L         &kp SEMI    &kp ENTER
&kp LEFT_SHIFT  &kp Z      &kp X         &kp C         &kp V      &lt 5 RIGHT_ARROW    &kp RIGHT_ARROW  &kp B   &kp N      &kp M      &kp COMMA     &kp PERIOD  &kp RIGHT_SHIFT
&kp C_MUTE      &kp GLOBE  &kp LEFT_GUI  &kp LEFT_ALT  &kp SPACE  &mo 1                &kp ENTER        &mo 2   &kp SPACE  &kp RCTRL  &kp CAPSLOCK  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp F11         &kp F1           &kp F2           &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6    &kp F7       &kp F8             &kp F9         &kp F10    &kp BACKSPACE
&kp F12         &trans           &out OUT_USB     &out OUT_BLE     &bt BT_CLR       &bt BT_CLR_ALL     &mmv MOVE_DOWN   &trans    &kp PAGE_UP  &kp UP             &kp PAGE_DOWN  &trans     &trans
&kp TAB         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &mmv MOVE_LEFT   &kp HOME  &kp LEFT     &kp DOWN           &kp RIGHT      &kp END    &trans
&kp LEFT_SHIFT  &rgb_ug RGB_OFF  &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &trans    &trans       &kp INSERT         &trans         &kp SLASH  &kp RIGHT_SHIFT
&kp C_MUTE      &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &kp LALT         &kp SPACE        &trans             &mkp LCLK        &trans    &kp SPACE    &kp RIGHT_CONTROL  &trans         &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp F11         &kp F1     &kp F2        &kp F3        &kp F4      &kp F5      &mmv MOVE_UP     &kp F6          &kp F7                &kp F8                 &kp F9     &kp F10        &kp BACKSPACE
&kp F12         &kp GRAVE  &kp EQUAL     &kp COLON     &kp APOS    &kp AT      &mmv MOVE_DOWN   &kp CARET       &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans     &trans         &trans
&kp TAB         &kp MINUS  &kp PLUS      &kp COMMA     &kp PERIOD  &kp HASH    &mmv MOVE_LEFT   &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SLASH  &kp BACKSLASH  &kp ENTER
&kp LEFT_SHIFT  &trans     &trans        &trans        &trans      &trans      &mmv MOVE_RIGHT  &trans          &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans     &trans         &kp RSHIFT
&trans          &trans     &kp LEFT_WIN  &kp LEFT_ALT  &kp SPACE   &trans      &mkp LCLK        &trans          &kp SPACE             &kp RCTRL              &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
